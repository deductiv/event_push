(this.webpackJsonpmain=this.webpackJsonpmain||[]).push([[2],{"./src/FileBrowserModal.js":function(e,l,i){var o,t;o=[l,i("react"),i("./node_modules/react-bootstrap/esm/Modal.js"),i("./node_modules/chonky/lib/index.js"),i("./node_modules/chonky-icon-fontawesome/lib/index.js")],void 0===(t=function(e,l,o,t,n){"use strict";var a=i("./node_modules/@babel/runtime/helpers/interopRequireDefault.js");Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(e){return l.default.createElement(o.default,{id:"ep_file_browser_modal",show:e.show,onHide:e.onHide,dialogClassName:"primaryModal","aria-labelledby":"file_browser",centered:!0,className:"modal-wide in",style:{height:"60%",resize:"vertical"}},l.default.createElement(o.default.Header,{closeButton:!0},l.default.createElement(o.default.Title,{id:"file_browser"},"Browse Location: ",e.location)),l.default.createElement(o.default.Body,{style:{height:"100%"}},l.default.createElement(t.FileBrowser,{instanceId:e.instanceId,files:e.file_list,folderChain:e.folder_chain,fillParentContainer:!0,onFileAction:e.onFileAction,defaultFileViewActionId:t.ChonkyActions.EnableListView.id,disableDragAndDrop:!0,disableDragAndDropProvider:!0,disableSelection:!0,disableDefaultFileActions:[t.ChonkyActions.OpenSelection.id,t.ChonkyActions.SelectAllFiles.id,t.ChonkyActions.ClearSelection.id,t.ChonkyActions.EnableCompactView.id,t.ChonkyActions.EnableGridView.id]},l.default.createElement(t.FileNavbar,null),l.default.createElement(t.FileToolbar,null),l.default.createElement(t.FileList,null))))},l=a(l),o=a(o),(0,t.setChonkyDefaults)({iconComponent:n.ChonkyIconFA}),t.ChonkyActions.ToggleHiddenFiles.option.defaultValue=!1}.apply(l,o))||(e.exports=t)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,