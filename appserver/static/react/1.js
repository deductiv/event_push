(this.webpackJsonpmain=this.webpackJsonpmain||[]).push([[1],{"./node_modules/react-fade-in/lib/FadeIn.js":function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),a=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return i(t,e),t};Object.defineProperty(t,"__esModule",{value:!0});var u=a(n("react"));t.default=function(e){var t=u.useState(0),n=t[0],r=t[1],i=e.transitionDuration||400,a=e.delay||50,o=e.wrapperTag||"div",l=e.childTag||"div",c=void 0===e.visible||e.visible;return u.useEffect((function(){var t=u.default.Children.count(e.children);if(c||(t=0),t==n){var o=setTimeout((function(){e.onComplete&&e.onComplete()}),i);return function(){return clearTimeout(o)}}var l=t>n?1:-1,d=setTimeout((function(){r(n+l)}),a);return function(){return clearTimeout(d)}}),[u.default.Children.count(e.children),a,n,c,i]),u.default.createElement(o,{className:e.className},u.default.Children.map(e.children,(function(t,r){return u.default.createElement(l,{className:e.childClassName,style:{transition:"opacity "+i+"ms, transform "+i+"ms",transform:n>r?"none":"translateY(20px)",opacity:n>r?1:0}},t)})))}},"./node_modules/react-fade-in/lib/index.js":function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=n("./node_modules/react-fade-in/lib/FadeIn.js");Object.defineProperty(t,"default",{enumerable:!0,get:function(){return r(i).default}})}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,